<?php require "/Users/wickb/Workspace/TechDivision_DesignByContract/src/TechDivision/PBC/Proxies/cache/_Users_wickb_Workspace_TechDivision_DesignByContract_tests_TechDivision_PBC_data_ClassWithSeveralMethodsPBCProxied.php";/**
 * Class TestAnnotationParser
 */class TestAnnotationParser extends TestAnnotationParserPBCProxied {/**
            * @var mixed
            */
            private $pbcOld;private function pbcClassInvariant() {}public function testFest1($param1, $param2, $param3) {$this->pbcClassInvariant();if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}$pbcResult = parent::testFest1($param1, $param2, $param3);$this->pbcClassInvariant();if (is_string($pbcResult)=== false){    throw new Exception("Assertion is_string($pbcResult) failed.");}return $pbcResult;}public function testFest2($param1) {$this->pbcClassInvariant();if (is_string($param1)=== false){    throw new Exception("Assertion is_string($param1) failed.");}$pbcResult = parent::testFest2($param1);$this->pbcClassInvariant();if (is_array($pbcResult)=== false){    throw new Exception("Assertion is_array($pbcResult) failed.");}return $pbcResult;} function parseFile($fileName) {$this->pbcClassInvariant();$pbcResult = parent::parseFile($fileName);$this->pbcClassInvariant();return $pbcResult;} function getConditions($docBlock, $conditionKeyword) {$this->pbcClassInvariant();$pbcResult = parent::getConditions($docBlock, $conditionKeyword);$this->pbcClassInvariant();return $pbcResult;} function parseAssertion($docString) {$this->pbcClassInvariant();$pbcResult = parent::parseAssertion($docString);$this->pbcClassInvariant();return $pbcResult;} function parseFunctionName($docBlock) {$this->pbcClassInvariant();$pbcResult = parent::parseFunctionName($docBlock);$this->pbcClassInvariant();return $pbcResult;} function usesKeyword($docBlock, $keyword) {$this->pbcClassInvariant();$pbcResult = parent::usesKeyword($docBlock, $keyword);$this->pbcClassInvariant();return $pbcResult;} function getClassNamespace($fileName) {$this->pbcClassInvariant();$pbcResult = parent::getClassNamespace($fileName);$this->pbcClassInvariant();return $pbcResult;} function getClassName($fileName) {$this->pbcClassInvariant();$pbcResult = parent::getClassName($fileName);$this->pbcClassInvariant();return $pbcResult;}}