<?php require "/Users/wickb/Workspace/TechDivision_DesignByContract/src/TechDivision/PBC/Proxies/cache/_Users_wickb_Workspace_TechDivision_DesignByContract_tests_TechDivision_PBC_data_ClassWithSeveralMethodsPBCProxied.php";/**
 * Class TestAnnotationParser
 */class TestAnnotationParser extends TestAnnotationParserPBCProxied {/**
            * @var mixed
            */
            private $PBCOld;private function pbcClassInvariant() {}public function testFest1($param1, $param2, $param3) {$this->pbcClassInvariant();if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}if (is_integer($param1)=== false){    throw new Exception("Assertion is_integer($param1) failed.");}$PBCResult = parent::testFest1($param1, $param2, $param3);$this->pbcClassInvariant();if (is_string($PBCResult)=== false){    throw new Exception("Assertion is_string($PBCResult) failed.");}return $PBCResult;}public function testFest2($param1) {$this->pbcClassInvariant();if (is_string($param1)=== false){    throw new Exception("Assertion is_string($param1) failed.");}$PBCResult = parent::testFest2($param1);$this->pbcClassInvariant();if (is_string($PBCResult)=== false){    throw new Exception("Assertion is_string($PBCResult) failed.");}return $PBCResult;} function parseFile($fileName) {$this->pbcClassInvariant();$PBCResult = parent::parseFile($fileName);$this->pbcClassInvariant();return $PBCResult;} function getConditions($docBlock, $conditionKeyword) {$this->pbcClassInvariant();$PBCResult = parent::getConditions($docBlock, $conditionKeyword);$this->pbcClassInvariant();return $PBCResult;} function parseAssertion($docString) {$this->pbcClassInvariant();$PBCResult = parent::parseAssertion($docString);$this->pbcClassInvariant();return $PBCResult;} function parseFunctionName($docBlock) {$this->pbcClassInvariant();$PBCResult = parent::parseFunctionName($docBlock);$this->pbcClassInvariant();return $PBCResult;} function usesKeyword($docBlock, $keyword) {$this->pbcClassInvariant();$PBCResult = parent::usesKeyword($docBlock, $keyword);$this->pbcClassInvariant();return $PBCResult;} function getClassNamespace($fileName) {$this->pbcClassInvariant();$PBCResult = parent::getClassNamespace($fileName);$this->pbcClassInvariant();return $PBCResult;} function getClassName($fileName) {$this->pbcClassInvariant();$PBCResult = parent::getClassName($fileName);$this->pbcClassInvariant();return $PBCResult;}}